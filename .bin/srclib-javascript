#!/usr/bin/env node

var parser = require("nomnom");
var findpkgs = require("commonjs-findpkgs");
var jsgAdapter = require("../lib/jsg_adapter")
var npm = require("npm");
var path = require("path");
var execFile = require("child_process").execFile;

parser.command("scan-commonjs")
  .option("repo", {
    help: "repository URI"
  })
  .option("subdir", {
    help: "subdirectory in repository"
  })
  .callback(function(opts) {
    // TODO(sqs): support ScanIgnore from repo Srcfile (pass to findpkgs ignore param)
    findpkgs(".", ["node_modules"], function(err, pkgs) {
      if (err) {
        console.error("Scanning failed:", err);
        process.exit(1);
      }

      // filter out undesirable packages (packages whose paths contain
      // "node_modules", "test", etc.)
      pkgs = pkgs.filter(function(pkg) {
        // TODO(sqs): we probably want to process things in node_modules for
        // local code, so remove this filter.
        var pathComps = pkg.dir.split("/");
        return pathComps.indexOf("node_modules") == -1 && pathComps.indexOf("test") == -1 && pathComps.indexOf("templates") == -1;
      });

      // filter out undesirable source files (minified files) from
      // packages
      pkgs.forEach(function(pkg) {
        pkg.libFiles = pkg.libFiles.filter(function(f) {
          return !/\.min\.js$/.test(f);
        });
      });

      // convert from commonjs-findpkgs format to source unit
      var srcunits = pkgs.map(function(pkg) {
        // collect all deps
        var allDeps = [];
        function collectDeps(deps) {
          if (deps) Object.keys(deps).forEach(function(name) { allDeps.push({name: name, version: deps[name]}); });
        }
        collectDeps(pkg.package.dependencies);
        collectDeps(pkg.package.devDependencies);

        return {
          Name: pkg.package.name,
          Type: "CommonJSPackage",
          Dir: pkg.dir,
          Files: pkg.libFiles.concat(pkg.testFiles),
          Dependencies: allDeps,
          Data: pkg.package,
          Ops: {depresolve: null, graph: null},
          Config: {
            npmInstall: !!process.env.IN_DOCKER_CONTAINER,
            jsg: {
              plugins: {
                node: {
                  coreModulesDir: process.env.NODEJS_CORE_MODULES_DIR || "$(JSG_DIR)/testdata/node_core_modules",
                }
              },
            },
          },
        };
      });

      console.log(JSON.stringify(srcunits, null, 2));
    });
  })
  .help("scan for CommonJS packages");

parser.command("depresolve")
  .callback(function(opts) {
    var stdin = process.stdin,
    stdout = process.stdout,
    inputChunks = [];

    stdin.resume();
    stdin.setEncoding("utf8");

    stdin.on("data", function (chunk) {
      inputChunks.push(chunk);
    });

    stdin.on("end", function () {
      var inputJSON = inputChunks.join("");
      var commonJSPackage = JSON.parse(inputJSON);

      var remaining = commonJSPackage.Dependencies ? commonJSPackage.Dependencies.length : 0;
      var resolutions = [];

      if (remaining == 0) {
        console.log('[]');
        return;
      }

      commonJSPackage.Dependencies.forEach(function(dep) {
        var i = commonJSPackage.Dependencies.indexOf(dep);
        resolutions[i] = {Raw: dep};
        var spec = dep.name + "@" + (dep.version || 'latest');
        npm.load(function(err, npm) {
          if (err) {
            console.error("npm.load failed: ", err);
            process.exit(1)
          }

          npm.commands.view(["--silent", spec], function(err,data) {
            if (err) {
              resolutions[i].Error = "error occurred while resolving: " + JSON.stringify(err);
            } else if (!data || Object.keys(data).length == 0) {
              resolutions[i].Error = "no npm package found with spec " + JSON.stringify(spec);
            } else {
              //Choose most recent version
              var info = Object.keys(data).slice(-1)[0];
              if (!info) {
                var repoURL = "";
                if (info.repository) {
                  if (typeof info.repository == "string") repoURL = info.repository;
                  else repoURL = info.repository.url;
                }

                resolutions[i].Target = {
                 ToRepoCloneURL: repoURL,
	          ToUnit: info.name,
	          ToUnitType: "CommonJSPackage",
	          ToVersionString: info.version
                };
              }
            }

            remaining--;
            if (remaining == 0) {
              // done resolving all
              console.log(JSON.stringify(resolutions, null, 2));
            }
          });
        });
      });
    });
  })
  .help("resolves dependencies of a CommonJS package");

parser.command("graph")
  .callback(function(opts) {
    var stdin = process.stdin,
    stdout = process.stdout,
    inputChunks = [];

    stdin.resume();
    stdin.setEncoding("utf8");

    stdin.on("data", function (chunk) {
      inputChunks.push(chunk);
    });

    stdin.on("end", function () {
      var inputJSON = inputChunks.join("");
      var commonJSPackage = JSON.parse(inputJSON);

      function graph() {
        jsgAdapter.run(".", commonJSPackage, function(err, graphData) {
          if (err) {
            console.error("Graphing " + commonJSPackage.Name + " failed:", err);
            process.exit(1);
          }
          console.log(JSON.stringify(graphData, null, 2));
        });
      }

      // TODO(sqs) install npm deps if we're in a docker container, since we can't rely on
      // them to have been installed locally. we need to account for the fact
      // that we've mounted the source volume readonly, so we can't just run
      // `npm install`.
      if (process.env.IN_DOCKER_CONTAINER && commonJSPackage.Config.npmInstall) {
        // running `npm install` in the /src dir fails because it's mounted
        // readonly. but `npm install -g` in the /src dir does nothing. so we
        // need to `npm install /src` from a dir other than /src to get `npm
        // install` to do anything.


        // TODO(sqs): only works for top-level package.jsons. we actually need
        // "/src/${dirname(package.json path)", which also requires us to
        // track the path to the package.json.
        execFile("npm", ["install", "--ignore-scripts", "/src"], {cwd: "/"}, function(err, stdout, stderr) {
          if (stderr) console.error(stderr);
          if (stdout) console.error(stdout);
          if (err) {
            console.error("npm install in Docker container failed: ", err);
            process.exit(1)
          }
          graph();
        });


        // It's apparently impossible to silence npm install output when using
        // npm.install. :(
        // var oldcwd = process.cwd();
        // process.chdir(path.join(oldcwd, ".."));
        // console.error("npm installing packages in Docker container...");
        // npm.load({loglevel: "silent"}, function(err, npm) {
        //   if (err) {
        //     console.error("npm.load in Docker container failed: ", err);
        //     process.exit(1)
        //   }
        //   // TODO(sqs): only works for top-level package.jsons. we actually need
        //   // "/src/${dirname(package.json path)", which also requires us to
        //   // track the path to the package.json.
        //   npm.commands.install(["/src"], function(err,data) {
        //     if (err) {
        //       console.error("npm install in Docker container failed: ", err);
        //       process.exit(1)
        //     }
        //     process.chdir(oldcwd);
        //     graph();
        //   });
        // });
      } else {
        graph();
      }
    });
  })
  .help("graph a CommonJS package using jsg/tern");

parser.parse();
